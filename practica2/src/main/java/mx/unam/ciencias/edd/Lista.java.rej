--- src/main/java/mx/unam/ciencias/edd/Lista.java
+++ src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -27,8 +27,8 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nodo con un elemento. */
         private Nodo(T elemento) {
-            // Aquí va su código.
-        }
+       		this.elemento = elemento;
+       	}
     }
 
     /* Clase interna privada para iteradores. */
@@ -40,37 +40,54 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nuevo iterador. */
         private Iterador() {
-            // Aquí va su código.
+            anterior = null;
+	    siguiente = cabeza;
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return ( siguiente != null );
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
-            // Aquí va su código.
-        }
+            if ( siguiente != null ) { 
+		anterior = siguiente;	
+		siguiente = siguiente.siguiente;
+	    } else { 
+		    throw new NoSuchElementException();
+	    }
+
+	    return anterior.elemento;
+	}
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
-            // Aquí va su código.
+            return ( anterior != null );
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
-            // Aquí va su código.
-        }
+        	if ( anterior != null ) {
+			siguiente = anterior;
+			anterior = anterior.anterior;
+		} else {
+			throw new NoSuchElementException();
+		}
+
+		return siguiente.elemento;
+	}
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
-            // Aquí va su código.
+		anterior = null;
+		siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
-            // Aquí va su código.
+            	siguiente = null;
+		anterior = rabo;
         }
     }
 
@@ -87,7 +104,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -96,7 +113,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return el número elementos en la lista.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return getLongitud();
     }
 
     /**
@@ -105,7 +122,7 @@ public class Lista<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+    	return ( cabeza == null );
     }
 
     /**
@@ -117,7 +134,18 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+	if ( elemento == null ) throw new IllegalArgumentException();
+
+    	Nodo n =  new Nodo(elemento);
+	if ( rabo == null ) {
+		cabeza = rabo = n;
+	} else { 
+		rabo.siguiente = n;
+		n.anterior = rabo;
+		rabo = n;
+	}
+
+	longitud++;
     }
 
     /**
@@ -128,7 +156,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaFinal(T elemento) {
-        // Aquí va su código.
+	    agrega(elemento);
     }
 
     /**
@@ -139,7 +167,31 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaInicio(T elemento) {
-        // Aquí va su código.
+	if ( elemento == null ) throw new IllegalArgumentException();
+	
+	Nodo n = new Nodo(elemento);
+	if ( cabeza == null ) { 
+		cabeza = rabo = n;
+	} else {			
+		cabeza.anterior = n;
+		n.siguiente = cabeza;
+		cabeza = n;
+	}
+
+	longitud++;
+    }
+
+    private Nodo getIEsimoNodo(int i) {
+	    int index = 0;
+
+	    Nodo n = cabeza;
+	    while ( n != null ) {    
+		if ( index == i ) return n;
+		n = n.siguiente;
+		index++;
+	    }
+
+	    return n;
     }
 
     /**
@@ -158,7 +210,59 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void inserta(int i, T elemento) {
-        // Aquí va su código.
+        if ( elemento == null ) throw new IllegalArgumentException();
+	    
+	if ( i < 1 ) {
+	       	agregaInicio(elemento);
+	} else if ( i > longitud - 1) {
+		agregaFinal(elemento);
+	} else {	
+		Nodo n = new Nodo(elemento);
+		longitud++;
+		Nodo s = getIEsimoNodo(i);
+		Nodo a = s.anterior;
+
+		n.anterior = a;
+		a.siguiente = n;
+
+		n.siguiente = s;
+		s.anterior = n;
+	}
+    }
+
+
+    private Nodo buscarNodo(T elemento) {
+	    
+	    Nodo n = cabeza;
+
+	    while ( n != null ) {
+	    	if ( n.elemento.equals(elemento) ) return n;
+		n = n.siguiente;
+	    }
+
+	    return null;
+    }
+
+    private void eliminaNodo(Nodo n) {
+	    longitud--;
+
+	    if ( rabo == cabeza ) {
+		    rabo = null;
+		    cabeza = null;
+	    } else if ( n == cabeza ) {
+		    Nodo s = n.siguiente;
+		    s.anterior = null;
+		    cabeza = s;
+	    } else if ( n == rabo ) {
+		    Nodo a = n.anterior;
+		    a.siguiente = null;
+		    rabo = a;
+	    } else {
+		    Nodo s = n.siguiente;
+		    Nodo a = n.anterior;
+		    a.siguiente = s;
+		    s.anterior = a;
+	    }
     }
 
     /**
@@ -167,7 +271,11 @@ public class Lista<T> implements Coleccion<T> {
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+	if ( elemento == null ) return;	
+	Nodo n = buscarNodo(elemento);
+	if ( n == null ) return;
+
+	eliminaNodo(n);
     }
 
     /**
@@ -176,7 +284,13 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaPrimero() {
-        // Aquí va su código.
+	if ( cabeza == null ) { throw new NoSuchElementException(); }
+	
+	T e = cabeza.elemento;
+
+	eliminaNodo(cabeza);	
+
+	return e;
     }
 
     /**
@@ -185,7 +299,12 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaUltimo() {
-        // Aquí va su código.
+	if ( rabo == null ) { throw new NoSuchElementException(); }
+
+	T e = rabo.elemento;
+	eliminaNodo(rabo);
+
+	return e;
     }
 
     /**
@@ -195,7 +314,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+	return buscarNodo(elemento) != null;
     }
 
     /**
@@ -203,23 +322,42 @@ public class Lista<T> implements Coleccion<T> {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista<T> reversa() {
-        // Aquí va su código.
+	Lista<T> reversa = new Lista<T>();
+	Nodo n = cabeza;
+
+	while ( n != null ) {
+		reversa.agregaInicio(n.elemento);
+		n = n.siguiente;
+	}
+
+    	return reversa;
     }
 
+
     /**
      * Regresa una copia de la lista. La copia tiene los mismos elementos que la
      * lista que manda llamar el método, en el mismo orden.
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+    	Lista<T> copia = new Lista<T>();
+	Nodo n = cabeza;
+
+	while ( n != null ) {
+		copia.agregaFinal(n.elemento);
+		n = n.siguiente;
+	}
+
+	return copia;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        cabeza = null;
+	rabo = null;
+	longitud = 0;
     }
 
     /**
@@ -228,7 +366,9 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getPrimero() {
-        // Aquí va su código.
+	    if ( cabeza == null ) throw new NoSuchElementException();
+
+            return cabeza.elemento;
     }
 
     /**
@@ -237,7 +377,9 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getUltimo() {
-        // Aquí va su código.
+	    if ( rabo == null ) throw new NoSuchElementException();
+
+            return rabo.elemento;
     }
 
     /**
@@ -248,7 +390,9 @@ public class Lista<T> implements Coleccion<T> {
      *         igual que el número de elementos en la lista.
      */
     public T get(int i) {
-        // Aquí va su código.
+	    if ( i < 0 || i > getElementos() - 1) throw new ExcepcionIndiceInvalido();
+
+            return getIEsimoNodo(i).elemento;
     }
 
     /**
@@ -258,7 +402,17 @@ public class Lista<T> implements Coleccion<T> {
      *         no está contenido en la lista.
      */
     public int indiceDe(T elemento) {
-        // Aquí va su código.
+        int index = 0;
+
+	Nodo n = cabeza;
+	while ( n != null ) {
+		if ( n.elemento == elemento ) return index;
+		n = n.siguiente;
+		index++;
+	}
+
+
+	return -1;
     }
 
     /**
@@ -266,7 +420,19 @@ public class Lista<T> implements Coleccion<T> {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        String s = "[";
+	Nodo c = cabeza;
+	if ( cabeza == rabo ) return "[]";
+		
+	while ( c != rabo ) {
+		s += String.format("%d, ", c.elemento);
+		c = c.siguiente;
+	}
+
+	s += String.format("%d]", rabo.elemento);
+
+	return s;
+
     }
 
     /**
@@ -279,7 +445,21 @@ public class Lista<T> implements Coleccion<T> {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
-        // Aquí va su código.
+        if ( getLongitud() != lista.getLongitud()) {
+		return false; 
+	} else {
+		Nodo a = cabeza;
+		Nodo o = lista.cabeza;
+
+		while ( a != null ) {
+			if ( !a.elemento.equals(o.elemento) ) return false;
+			a = a.siguiente;
+			o = o.siguiente;
+		}
+
+		return true;
+	}
+
     }
 
     /**
